{
  
    
        "post0": {
            "title": "Week 9",
            "content": "import torch torch.cuda.empty_cache() . import base64 from io import BytesIO from PIL import Image import pandas as pd import numpy as np import requests import bs4 as bs import regex as re import seaborn as sns sns.set_style() . path = untar_data(URLs.MNIST_SAMPLE) . Path.BASE_PATH = path . path.ls() . (#3) [Path(&#39;labels.csv&#39;),Path(&#39;train&#39;),Path(&#39;valid&#39;)] . def init_params(size, std=1.0): return (torch.randn(size)*std).requires_grad_() . time = torch.arange(0,20).float(); time . tensor([ 0., 1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16., 17., 18., 19.]) . speed = torch.randn(20)*3 + 0.75*(time-9.5)**2 + 1 plt.scatter(time,speed); . def f(t, params): a,b,c = params return a*(t**2) + (b*t) + c . def mse(preds, targets): return ((preds-targets)**2).mean().sqrt() . Step 1: Initialize the parameteres . params = torch.randn(3).requires_grad_() . Step 2: Calculate the predictions . preds = f(time, params) . def show_preds(preds, ax=None): if ax is None: ax=plt.subplots()[1] ax.scatter(time, speed) ax.scatter(time, to_np(preds), color=&#39;red&#39;) ax.set_ylim(-300,100) . show_preds(preds) . Step 3: Calculate the loss . loss = mse(preds, speed) loss . tensor(178.9218, grad_fn=&lt;SqrtBackward&gt;) . Step 4: Calculate the gradients . loss.backward() params.grad . tensor([166.2099, 10.6992, 0.6881]) . params.grad * 1e-5 . tensor([1.6621e-03, 1.0699e-04, 6.8806e-06]) . params . tensor([1.1480, 0.5953, 0.2770], requires_grad=True) . Step 5: Step the weights . Update the parameters: . lr = 1e-5 params.data -= lr * params.grad.data params.grad = None . See if it has improved: . preds = f(time,params) mse(preds, speed) . tensor(178.6444, grad_fn=&lt;SqrtBackward&gt;) . show_preds(preds) . def apply_step(params, prn=True): preds = f(time, params) loss = mse(preds, speed) loss.backward() params.data -= lr * params.grad.data params.grad = None if prn: print(loss.item()) return preds . Step 6: Repeat the process . for i in range(10): apply_step(params) . 178.6444091796875 178.3670196533203 178.0896453857422 177.81228637695312 177.53494262695312 177.25762939453125 176.98031616210938 176.7030029296875 176.42576599121094 176.14849853515625 . _,axs = plt.subplots(1,4,figsize=(12,3)) for ax in axs: show_preds(apply_step(params, False), ax) plt.tight_layout() . Step 7: Stop . The MNIST Loss Function . threes = (path/&#39;train&#39;/&#39;3&#39;).ls().sorted() sevens = (path/&#39;train&#39;/&#39;7&#39;).ls().sorted() threes . (#6131) [Path(&#39;train/3/10.png&#39;),Path(&#39;train/3/10000.png&#39;),Path(&#39;train/3/10011.png&#39;),Path(&#39;train/3/10031.png&#39;),Path(&#39;train/3/10034.png&#39;),Path(&#39;train/3/10042.png&#39;),Path(&#39;train/3/10052.png&#39;),Path(&#39;train/3/1007.png&#39;),Path(&#39;train/3/10074.png&#39;),Path(&#39;train/3/10091.png&#39;)...] . seven_tensors = [tensor(Image.open(o)) for o in sevens] three_tensors = [tensor(Image.open(o)) for o in threes] len(three_tensors),len(seven_tensors) . (6131, 6265) . stacked_sevens = torch.stack(seven_tensors).float()/255 stacked_threes = torch.stack(three_tensors).float()/255 stacked_threes.shape . torch.Size([6131, 28, 28]) . valid_3_tens = torch.stack([tensor(Image.open(o)) for o in (path/&#39;valid&#39;/&#39;3&#39;).ls()]) valid_3_tens = valid_3_tens.float()/255 valid_7_tens = torch.stack([tensor(Image.open(o)) for o in (path/&#39;valid&#39;/&#39;7&#39;).ls()]) valid_7_tens = valid_7_tens.float()/255 valid_3_tens.shape,valid_7_tens.shape . (torch.Size([1010, 28, 28]), torch.Size([1028, 28, 28])) . train_x = torch.cat([stacked_threes, stacked_sevens]).view(-1, 28*28) . train_y = tensor([1]*len(threes) + [0]*len(sevens)).unsqueeze(1) train_x.shape,train_y.shape . (torch.Size([12396, 784]), torch.Size([12396, 1])) . dset = list(zip(train_x,train_y)) x,y = dset[0] x.shape,y . (torch.Size([784]), tensor([1])) . valid_x = torch.cat([valid_3_tens, valid_7_tens]).view(-1, 28*28) valid_y = tensor([1]*len(valid_3_tens) + [0]*len(valid_7_tens)).unsqueeze(1) valid_dset = list(zip(valid_x,valid_y)) . weights = init_params((28*28,1)) . bias = init_params(1) . (train_x[0]*weights.T).sum() + bias . tensor([2.8989], grad_fn=&lt;AddBackward0&gt;) . def linear1(xb): return xb@weights + bias preds = linear1(train_x) preds . tensor([[ 2.8989], [ 4.2560], [-0.2983], ..., [ 7.7305], [13.6528], [ 5.9436]], grad_fn=&lt;AddBackward0&gt;) . corrects = (preds&gt;0.0).float() == train_y corrects . tensor([[ True], [ True], [False], ..., [False], [False], [False]]) . corrects.float().mean().item() . 0.4309454560279846 . weights[0] *= 1.0001 . preds = linear1(train_x) ((preds&gt;0.0).float() == train_y).float().mean().item() . 0.4309454560279846 . trgts = tensor([1,0,1]) prds = tensor([0.9, 0.4, 0.2]) . def mnist_loss(predictions, targets): return torch.where(targets==1, 1-predictions, predictions).mean() . torch.where(trgts==1, 1-prds, prds) . tensor([0.1000, 0.4000, 0.8000]) . mnist_loss(prds,trgts) . tensor(0.4333) . mnist_loss(tensor([0.9, 0.4, 0.8]),trgts) . tensor(0.2333) . def sigmoid(x): return 1/(1+torch.exp(-x)) . plot_function(torch.sigmoid, title=&#39;Sigmoid&#39;, min=-4, max=4) . def mnist_loss(predictions, targets): predictions = predictions.sigmoid() return torch.where(targets==1, 1-predictions, predictions).mean() . coll = range(15) dl = DataLoader(coll, batch_size=5, shuffle=True) list(dl) . [tensor([ 7, 14, 3, 0, 6]), tensor([ 1, 12, 10, 5, 8]), tensor([13, 9, 4, 2, 11])] . ds = L(enumerate(string.ascii_lowercase)) ds . (#26) [(0, &#39;a&#39;),(1, &#39;b&#39;),(2, &#39;c&#39;),(3, &#39;d&#39;),(4, &#39;e&#39;),(5, &#39;f&#39;),(6, &#39;g&#39;),(7, &#39;h&#39;),(8, &#39;i&#39;),(9, &#39;j&#39;)...] . dl = DataLoader(ds, batch_size=6, shuffle=True) list(dl) . [(tensor([ 1, 10, 7, 9, 24, 17]), (&#39;b&#39;, &#39;k&#39;, &#39;h&#39;, &#39;j&#39;, &#39;y&#39;, &#39;r&#39;)), (tensor([ 6, 12, 16, 15, 19, 2]), (&#39;g&#39;, &#39;m&#39;, &#39;q&#39;, &#39;p&#39;, &#39;t&#39;, &#39;c&#39;)), (tensor([ 0, 20, 5, 23, 3, 25]), (&#39;a&#39;, &#39;u&#39;, &#39;f&#39;, &#39;x&#39;, &#39;d&#39;, &#39;z&#39;)), (tensor([ 4, 8, 21, 11, 13, 14]), (&#39;e&#39;, &#39;i&#39;, &#39;v&#39;, &#39;l&#39;, &#39;n&#39;, &#39;o&#39;)), (tensor([18, 22]), (&#39;s&#39;, &#39;w&#39;))] . Putting It All Together . Re-initialize parameters: . weights = init_params((28*28,1)) bias = init_params(1) . DataLoader created from a Dataset: . dl = DataLoader(dset, batch_size=256) xb,yb = first(dl) xb.shape,yb.shape . (torch.Size([256, 784]), torch.Size([256, 1])) . Same for the validation set: . valid_dl = DataLoader(valid_dset, batch_size=256) . Mini-batch of size 4 for testing: . batch = train_x[:4] batch.shape . torch.Size([4, 784]) . preds = linear1(batch) preds . tensor([[8.0212], [9.3134], [2.0936], [7.6557]], grad_fn=&lt;AddBackward0&gt;) . loss = mnist_loss(preds, train_y[:4]) loss . tensor(0.0277, grad_fn=&lt;MeanBackward0&gt;) . Calculate the gradients: . loss.backward() weights.grad.shape,weights.grad.mean(),bias.grad . (torch.Size([784, 1]), tensor(-0.0035), tensor([-0.0246])) . Everything in a function: . def calc_grad(xb, yb, model): preds = model(xb) loss = mnist_loss(preds, yb) loss.backward() . Test the function: . calc_grad(batch, train_y[:4], linear1) weights.grad.mean(),bias.grad . (tensor(-0.0071), tensor([-0.0493])) . If we call it twice the gradients change: . calc_grad(batch, train_y[:4], linear1) weights.grad.mean(),bias.grad . (tensor(-0.0106), tensor([-0.0739])) . Reason being that the loss.backward adds the gradients of loss to any currently stored gradients. So we need to set the current gradients to 0 first: . weights.grad.zero_() bias.grad.zero_(); . . Note: Inplace Operations: Methods in PyTorch whose names end in an underscore modify their objects in place. For instance, bias.zero_() sets all elements of the tensor bias to 0. . def train_epoch(model, lr, params): for xb,yb in dl: calc_grad(xb, yb, model) for p in params: p.data -= p.grad*lr p.grad.zero_() . (preds&gt;0.0).float() == train_y[:4] . tensor([[True], [True], [True], [True]]) . Function to calculate validation accuracy: . def batch_accuracy(xb, yb): preds = xb.sigmoid() correct = (preds&gt;0.5) == yb return correct.float().mean() . Check it works: . batch_accuracy(linear1(batch), train_y[:4]) . tensor(1.) . Put the batches together: . def validate_epoch(model): accs = [batch_accuracy(model(xb), yb) for xb,yb in valid_dl] return round(torch.stack(accs).mean().item(), 4) . validate_epoch(linear1) . 0.3944 . Starting point done. Train for one epoch to see if accuray improves: . lr = 1. params = weights,bias train_epoch(linear1, lr, params) validate_epoch(linear1) . 0.4917 . Then a few more: . for i in range(20): train_epoch(linear1, lr, params) print(validate_epoch(linear1), end=&#39; &#39;) . 0.4942 0.4986 0.7137 0.7324 0.8769 0.9233 0.9433 0.9511 0.9536 0.9594 0.9628 0.9623 0.9662 0.9682 0.9687 0.9697 0.9711 0.9726 0.9726 0.9731 . My own learner from scratch . class MyLearner(): def __init__(self, dls : DataLoaders, model, loss_func, opt_func, metrics, lr=1e-3): self.dls = dls self.model = model self.loss_func = loss_func self.opt_func = opt_func self.metrics = metrics self.lr = lr self.opt = self.opt_func([p for p in self.model.parameters() if p.requires_grad], lr=self.lr) def fit(self, n_epoch): for i in range(n_epoch): self.train_epoch() print(f&quot;t_loss: {round(float(self.loss), 4)} acc: {self.validate_epoch()}&quot;, end=&#39; n&#39;) def train_epoch(self): for xb,yb in self.dls.train: self.calc_grad(xb, yb) self.opt.step() self.opt.zero_grad() def calc_grad(self, xb, yb): self.preds = self.model(xb) self.loss_grad = self.loss_func(self.preds, yb) self.loss = self.loss_grad.clone() self.loss_grad.backward() def validate_epoch(self): accs = [self.metrics(self.model(xb), yb) for xb,yb in self.dls.valid] return round(torch.stack(accs).mean().item(), 4) . my_net = nn.Sequential( nn.Linear(28*28,128), nn.ReLU(), nn.Linear(128,64), nn.ReLU(), nn.Linear(64,1), ) . dls = DataLoaders(dl, valid_dl) . my_learner = MyLearner(dls, my_net, loss_func=mnist_loss, opt_func=SGD, metrics=batch_accuracy) . my_learner.fit(40) . t_loss: 0.4746 acc: 0.5068 t_loss: 0.474 acc: 0.5068 t_loss: 0.4733 acc: 0.5068 t_loss: 0.4726 acc: 0.5073 t_loss: 0.4719 acc: 0.5078 t_loss: 0.4711 acc: 0.5093 t_loss: 0.4704 acc: 0.5151 t_loss: 0.4696 acc: 0.5186 t_loss: 0.4689 acc: 0.5249 t_loss: 0.4681 acc: 0.5361 t_loss: 0.4673 acc: 0.5542 t_loss: 0.4664 acc: 0.5737 t_loss: 0.4656 acc: 0.5923 t_loss: 0.4647 acc: 0.6133 t_loss: 0.4638 acc: 0.6353 t_loss: 0.4629 acc: 0.6567 t_loss: 0.462 acc: 0.6816 t_loss: 0.461 acc: 0.7119 t_loss: 0.4601 acc: 0.7373 t_loss: 0.4591 acc: 0.7588 t_loss: 0.4581 acc: 0.7725 t_loss: 0.457 acc: 0.7964 t_loss: 0.456 acc: 0.811 t_loss: 0.4549 acc: 0.8281 t_loss: 0.4538 acc: 0.8413 t_loss: 0.4526 acc: 0.8564 t_loss: 0.4515 acc: 0.8691 t_loss: 0.4503 acc: 0.875 t_loss: 0.449 acc: 0.8813 t_loss: 0.4477 acc: 0.8867 t_loss: 0.4464 acc: 0.8984 t_loss: 0.445 acc: 0.9082 t_loss: 0.4436 acc: 0.9155 t_loss: 0.4421 acc: 0.9223 t_loss: 0.4406 acc: 0.9267 t_loss: 0.439 acc: 0.9287 t_loss: 0.4374 acc: 0.9316 t_loss: 0.4357 acc: 0.937 t_loss: 0.4339 acc: 0.9424 t_loss: 0.4321 acc: 0.9468 .",
            "url": "https://double-em.github.io/themlblog/jupyter/exercise/2021/03/02/fastai-neuralnet-from-scratch.html",
            "relUrl": "/jupyter/exercise/2021/03/02/fastai-neuralnet-from-scratch.html",
            "date": " • Mar 2, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Who Painted the Painting?",
            "content": "import fastbook fastbook.setup_book() . from fastbook import * from fastai.vision.widgets import * . import torch torch.cuda.empty_cache() . import pandas as pd import numpy as np df = pd.read_csv(&#39;data/artists.csv&#39;) names = df[[&#39;name&#39;]] . images = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=RandomResizedCrop(224, min_scale=0.5) ) dls = images.dataloaders(Path(&#39;data/images&#39;), num_workers=0) dls.valid.show_batch(max_n=4, nrows=1) . learn = cnn_learner(dls, resnet50, metrics=error_rate).to_fp16() learn.fine_tune(4) . epoch train_loss valid_loss error_rate time . 0 | 2.659816 | 1.660063 | 0.436146 | 03:21 | . epoch train_loss valid_loss error_rate time . 0 | 1.514944 | 1.270798 | 0.351767 | 03:36 | . 1 | 1.118307 | 1.037294 | 0.291334 | 03:36 | . 2 | 0.638050 | 0.867441 | 0.268529 | 03:32 | . 3 | 0.396811 | 0.846549 | 0.269099 | 03:34 | . pred,pred_idx,probs = learn.predict(&quot;data/test.jpg&quot;) . lbl_pred = widgets.Label() lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; lbl_pred .",
            "url": "https://double-em.github.io/themlblog/jupyter/exercise/2021/02/16/who-painted.html",
            "relUrl": "/jupyter/exercise/2021/02/16/who-painted.html",
            "date": " • Feb 16, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Week 8 - Chapter 4A",
            "content": "Explain how the &quot;pixel similarity&quot; approach to classifying digits works. . Finder gennemsnitlige pixel værdi af det vi prøver at finde, sammenligner pixel værdierne for et digit med vores average. | . | What is a list comprehension? . Create one now that selects odd numbers from a list and doubles them. [i * 2 for i in numbers if x % 2 == 1] | . | What is a &quot;rank-3 tensor&quot;? . A single 3 dimensional tensor | . | What are RMSE and L1 norm? . Root mean squared error eller L2: | Mean absolute difference: | . | Create a 3×3 tensor or array containing the numbers from 1 to 9. . | from torch import tensor ten = tensor([ [1, 2, 3], [4, 5, 6], [7, 8, 9]]) . Double it. | . ten = ten * 2 ten . tensor([[ 2, 4, 6], [ 8, 10, 12], [14, 16, 18]]) . Select the bottom-right four numbers. | . ten[1:,1:] . tensor([[10, 12], [16, 18]]) . What is broadcasting? . Hvis to tensor er af forskellige ranks, kan vi bruge broadcasting til at expande den mindre ranket tensor til samme rank, som den større tensor. Det er vigtigt at forstå at PyTorch ikke faktisk kopier billederne til at opnå ranken, men lader som om at tensoren er af den størrelse. Derved undgås der at allokeres hukommelse til det. Dette muliggør, at PyTorch kan bruge matematiske funktioner på de 2 tensors / array f.eks. at gange dem eller tage gennemsnittet. | . | Are metrics generally calculated using the training set, or the validation set? Why? . Det gøres på validation sættet, da vi måler en models performance på deres evne til at kategorisere ikke før set data. | . | What is SGD? . Stochastic Gradient Descent | Det er en iterativ måde, at optimere vores model via. gradients. Afhængig af vores Learning Rate, tager vi små skridt mod det bedste fit. | . | What are the seven steps in SGD for machine learning? . Initialize the parameters | Calculate the predictions | Calculate the loss | Calculate the gradients | Step the weights | Repeat the Process | Stop . . | . | How do we initialize the weights in a model? . Random | Pretrained model (Transfer learning). | . | What is &quot;loss&quot;? . Mængde af fejl i vores model, som skal minimeres. Loss er højere, hvis modellen tager fejl især, hvis den også er meget sikker på fejlen. | . | Why can&#39;t we always use a high learning rate? . Fordi man vil overshoot ens minimale loss eller nogen gange blive værre, da den tager for store skridt. | . | What is a &quot;gradient&quot;? . Hvor stejlt / hældningen på det punkt i kurven. | . | Why can&#39;t we use accuracy as a loss function? . Fordi accuracy er ikke godt nok til en model. Loss er en bedre repræsentation matematisk for fejl. | . | What is the difference between a loss function and a metric? . Loss function bruges til at justere vægte mens metrics er det vi selv måler på for at se kvaliteten af vores model. | . | What is the function to calculate new weights using a learning rate? . Backpropagation. | . | What does the backward method do? . Justere vægte igennem netværket, starter ved head af modellen. | . |",
            "url": "https://double-em.github.io/themlblog/jupyter/exercise/2021/02/16/week-8.html",
            "relUrl": "/jupyter/exercise/2021/02/16/week-8.html",
            "date": " • Feb 16, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Hotdog Classifier",
            "content": "# Fast book setup import fastbook fastbook.setup_book() from fastbook import * from fastai.vision.widgets import * . conf_id = &quot;efb1b149-c219-4091-be6d-14a279c405c4&quot; key_id = &quot;1be3ada0f2a649d087e9fb39798485a0&quot; #Define method to search bing for images def search_images_bing_new(key, term, customConfigId, min_sz=128): url = &#39;https://api.bing.microsoft.com/v7.0/custom/images/search?&#39; + &#39;q=&#39; + term + &#39;&amp;&#39; + &#39;customconfig=&#39; + customConfigId + &#39;&amp;&#39; + &#39;count=150&#39; r = requests.get(url, headers={&#39;Ocp-Apim-Subscription-Key&#39;: key}) search_results = r.json() return L([img[&quot;thumbnailUrl&quot;] for img in search_results[&quot;value&quot;][:150]]) . ims = search_images_bing_new(key_id, &#39;hot dog&#39;, conf_id) len(ims) . 150 . dest = &#39;images/hot_dog.jpg&#39; download_url(ims[0], dest) im = Image.open(dest) im.to_thumb(128,128) . image_types = &#39;hot dog&#39;, &#39;burger&#39; path = Path(&#39;foods&#39;) if not path.exists(): path.mkdir() for o in image_types: dest = (path/o) dest.mkdir(exist_ok=True) results = search_images_bing_new(key_id, o, conf_id) download_images(dest, urls=results) fns = get_image_files(path) failed = verify_images(fns) failed.map(Path.unlink) . (#0) [] . food = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=.2, seed = 42), get_y=parent_label, item_tfms=RandomResizedCrop(224, min_scale=0.5) ) dls = food.dataloaders(path) dls.valid.show_batch(max_n=4, nrows=1) . learn = cnn_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(4) . epoch train_loss valid_loss error_rate time . 0 | 1.226112 | 0.206438 | 0.083333 | 00:03 | . epoch train_loss valid_loss error_rate time . 0 | 0.343744 | 0.164238 | 0.050000 | 00:04 | . 1 | 0.246327 | 0.101516 | 0.066667 | 00:03 | . 2 | 0.167483 | 0.097955 | 0.050000 | 00:03 | . 3 | 0.126819 | 0.106567 | 0.050000 | 00:03 | . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() interp.plot_top_losses(5, nrows=1) . cleaner = ImageClassifierCleaner(learn) cleaner . for idx in cleaner.delete(): cleaner.fns[idx].unlink() . btn_upload = widgets.FileUpload() btn_upload . img = PILImage.create(btn_upload.data[-1]) . out_pl = widgets.Output() out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) out_pl . pred,pred_idx,probs = learn_inf.predict(img) . NameError Traceback (most recent call last) &lt;ipython-input-18-9a18687b977c&gt; in &lt;module&gt; -&gt; 1 pred,pred_idx,probs = learn_inf.predict(img) NameError: name &#39;learn_inf&#39; is not defined . lbl_pred = widgets.Label() lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; lbl_pred . NameError Traceback (most recent call last) &lt;ipython-input-17-fb9bca207f6f&gt; in &lt;module&gt; 1 lbl_pred = widgets.Label() -&gt; 2 lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; 3 lbl_pred NameError: name &#39;pred&#39; is not defined . btn_run = widgets.Button(description=&#39;Classify&#39;) btn_run . def on_click_classify(change): img = PILImage.create(btn_upload.data[-1]) out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) pred,pred_idx,probs = learn_inf.predict(img) lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; btn_run.on_click(on_click_classify) . VBox([widgets.Label(&#39;Select your bear!&#39;), btn_upload, btn_run, out_pl, lbl_pred]) . !pip install voila !jupyter serverextension enable voila --sys-prefix . Collecting voila Downloading voila-0.2.6-py3-none-any.whl (1.9 MB) |████████████████████████████████| 1.9 MB 15.1 MB/s eta 0:00:01 Requirement already satisfied: nbclient&lt;0.6,&gt;=0.4.0 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from voila) (0.5.1) Collecting nbconvert&lt;7,&gt;=6.0.0 Downloading nbconvert-6.0.7-py3-none-any.whl (552 kB) |████████████████████████████████| 552 kB 48.8 MB/s eta 0:00:01 Collecting jupyter-server&lt;2.0.0,&gt;=0.3.0 Downloading jupyter_server-1.3.0-py3-none-any.whl (188 kB) |████████████████████████████████| 188 kB 51.0 MB/s eta 0:00:01 Requirement already satisfied: jupyter-client&lt;7,&gt;=6.1.3 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from voila) (6.1.7) Requirement already satisfied: traitlets&gt;=4.2 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbclient&lt;0.6,&gt;=0.4.0-&gt;voila) (5.0.5) Requirement already satisfied: async-generator in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbclient&lt;0.6,&gt;=0.4.0-&gt;voila) (1.10) Requirement already satisfied: nbformat&gt;=5.0 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbclient&lt;0.6,&gt;=0.4.0-&gt;voila) (5.0.8) Requirement already satisfied: nest-asyncio in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbclient&lt;0.6,&gt;=0.4.0-&gt;voila) (1.4.3) Requirement already satisfied: jupyterlab-pygments in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (0.1.2) Requirement already satisfied: defusedxml in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (0.6.0) Requirement already satisfied: testpath in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (0.4.4) Requirement already satisfied: pygments&gt;=2.4.1 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (2.7.2) Requirement already satisfied: bleach in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (3.2.1) Requirement already satisfied: mistune&lt;2,&gt;=0.8.1 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (0.8.4) Requirement already satisfied: pandocfilters&gt;=1.4.1 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (1.4.2) Requirement already satisfied: jupyter-core in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (4.7.0) Requirement already satisfied: jinja2&gt;=2.4 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (2.11.2) Requirement already satisfied: entrypoints&gt;=0.2.2 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (0.3) Requirement already satisfied: ipython-genutils in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (0.2.0) Requirement already satisfied: prometheus-client in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (0.9.0) Requirement already satisfied: pyzmq&gt;=17 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (20.0.0) Requirement already satisfied: Send2Trash in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (1.5.0) Requirement already satisfied: terminado&gt;=0.8.3 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (0.9.1) Requirement already satisfied: tornado&gt;=6.1.0 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (6.1) Collecting anyio&gt;=2.0.2 Downloading anyio-2.1.0-py3-none-any.whl (64 kB) |████████████████████████████████| 64 kB 4.1 MB/s eta 0:00:01 Requirement already satisfied: python-dateutil&gt;=2.1 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jupyter-client&lt;7,&gt;=6.1.3-&gt;voila) (2.8.1) Requirement already satisfied: jsonschema!=2.5.0,&gt;=2.4 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbformat&gt;=5.0-&gt;nbclient&lt;0.6,&gt;=0.4.0-&gt;voila) (3.2.0) Requirement already satisfied: webencodings in /opt/conda/envs/fastai/lib/python3.8/site-packages (from bleach-&gt;nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (0.5.1) Requirement already satisfied: six&gt;=1.9.0 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from bleach-&gt;nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (1.15.0) Requirement already satisfied: packaging in /opt/conda/envs/fastai/lib/python3.8/site-packages (from bleach-&gt;nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (20.4) Requirement already satisfied: MarkupSafe&gt;=0.23 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jinja2&gt;=2.4-&gt;nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (1.1.1) Requirement already satisfied: ptyprocess; os_name != &#34;nt&#34; in /opt/conda/envs/fastai/lib/python3.8/site-packages (from terminado&gt;=0.8.3-&gt;jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (0.6.0) Requirement already satisfied: idna&gt;=2.8 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from anyio&gt;=2.0.2-&gt;jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (2.10) Collecting sniffio&gt;=1.1 Downloading sniffio-1.2.0-py3-none-any.whl (10 kB) Requirement already satisfied: setuptools in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jsonschema!=2.5.0,&gt;=2.4-&gt;nbformat&gt;=5.0-&gt;nbclient&lt;0.6,&gt;=0.4.0-&gt;voila) (49.6.0.post20201009) Requirement already satisfied: pyrsistent&gt;=0.14.0 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jsonschema!=2.5.0,&gt;=2.4-&gt;nbformat&gt;=5.0-&gt;nbclient&lt;0.6,&gt;=0.4.0-&gt;voila) (0.17.3) Requirement already satisfied: attrs&gt;=17.4.0 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jsonschema!=2.5.0,&gt;=2.4-&gt;nbformat&gt;=5.0-&gt;nbclient&lt;0.6,&gt;=0.4.0-&gt;voila) (20.3.0) Requirement already satisfied: pyparsing&gt;=2.0.2 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from packaging-&gt;bleach-&gt;nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (2.4.7) Installing collected packages: nbconvert, sniffio, anyio, jupyter-server, voila Attempting uninstall: nbconvert Found existing installation: nbconvert 5.6.1 Uninstalling nbconvert-5.6.1: Successfully uninstalled nbconvert-5.6.1 ERROR: After October 2020 you may experience errors when installing or updating packages. This is because pip will change the way that it resolves dependency conflicts. We recommend you use --use-feature=2020-resolver to test your packages with the new resolver before it becomes the default. nbdev 1.1.5 requires nbconvert&lt;6, but you&#39;ll have nbconvert 6.0.7 which is incompatible. Successfully installed anyio-2.1.0 jupyter-server-1.3.0 nbconvert-6.0.7 sniffio-1.2.0 voila-0.2.6 Enabling: voila - Writing config: /opt/conda/envs/fastai/etc/jupyter - Validating... voila 0.2.6 OK .",
            "url": "https://double-em.github.io/themlblog/jupyter/exercise/2021/02/16/hotdog-classifier.html",
            "relUrl": "/jupyter/exercise/2021/02/16/hotdog-classifier.html",
            "date": " • Feb 16, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Uge 6 Opgaver . Name five areas where deep learning is now the best in the world. . Natural Language Processing Answering questions; speech recognition; summarizing documents; classifying documents; finding names, dates, etc. in documents; searching for articles mentioning a concept . | Computer Vision Satellite and drone imagery interpretation (e.g., for disaster resilience), face recognition, image captioning, reading traffic signs, locating pedestrians and vehicles in autonomous vehicles . | Medicine u Finding anomalies in radiology images, including CT, MRI, and X-ray images; counting features in pathology slides; measuring features in ultrasounds; diagnosing diabetic retinopathy . | Biology Folding proteins; classifying proteins; many genomics tasks, such as tumornormal sequencing and classifying clinically actionable genetic mutations; cell classification; analyzing protein/protein interactions . | Image generation Colorizing images, increasing image resolution, removing noise from images, converting images to art in the style of famous artists . | Recommendation systems . | Robotics . | . | Playing games . Based on the book of the same name, what are the requirements for parallel distributed processing (PDP)? . A Set of processing units | A State of activation | An output function for each unit | A pattern of connectivity among units | A propagation rule for propagating patterns of activities through the network of connectivities | An activation rule for combining the inputs impinging on a unit with the current state of that unit to produce an output for the unit | A learning rule whereby patterns of connectivity are modified by experience • An environment within which the system must operate | . | What were the two theoretical misunderstandings that held back the field of neural networks? . Første misforståelse: at fordi et enkelt lag af neuralt netværk devices ikke kunne lære noget så simpelt som XOR, så var neurale netværk en deadend. . | Anden misforståelse: At netværket blev for langsomt og stort hvis man tilføjer endnu et lag. . | . | What is a GPU? . Processoren der ligger på grafikkortet | Graphical Processing unit | . | Why is it hard to use a traditional computer program to recognize images in a photo? . Med et traditionelt computer program skal du beskrive de skridt, som du gør, for at genkende et billede. Det ved vi ikke præcist selv, derfor kan vi ikke lære computeren det. | . | What did Samuel mean by “weight assignment”? . Andre værdier, der definerer hvordan programmet vil operere | . | What term do we normally use in deep learning for what Samuel called “weights”? . Parameters | . | Draw a picture that summarizes Samuel’s view of a machine learning model. . | Why is it hard to understand why a deep learning model makes a particular prediction? . Fordi det er en Blackbox. | For at finde ud af det skal der graves for at finde ud af mere. | . | What is the name of the theorem that shows that a neural network can solve any mathematical problem to any level of accuracy? . Universal Approximation Theorem | . | What do you need in order to train a model? . Training set | Validation set | Labelled Data? | . | How could a feedback loop impact the rollout of a predictive policing model? . Grunden til det er fordi der bruges modellen til at predicte crimes, er det der hvor politiet har fokus, derfor er det bare en bekræftelse for modellen at den havde ret. Det næste dataset består så kun af bekræftelser, hvormed modellen bliver ved med og bliver bliver bekræftet. Dermed er den biased og det er en positive feedback loop. | . | Do we always have to use 224×224-pixel images with the cat recognition model? . No. Increase in size means higher memory consumption and longer computation time, but also higher accuracy. | . | What is the difference between classification and regression? . Classification: sæt ind i kasser | Regression: Handler om at finde en optimal funktion til at identificere data fra en kontinuerlig virkelig værdi og forudsige ting om den. | . | What is a validation set? What is a test set? Why do we need them? . Et sæt for at teste ens model bruges for at se om modellen har lært mønstre i stedet for training sættet also known as the development set (which is used only for evaluation . | Test set er en isoleret set af data vi fjernede fra starten | For at se om mennesket har overfittet. | . | What will fastai do if you don’t provide a validation set? Hvis du ikke gi’r et valideringsset, frasorterer det selv 20% af training dataet. . | Can we always use a random sample for a validation set? Why or why not? . Hvis modellen skal forudsige ting ude i fremtiden, er det bedst at frasortere den sidste portion af dataet. Det er bedst at bruge, hvad man ved om den virkelige data, når man skal frasortere til validation data. | . | What is overfitting? Provide an example. . Når modellen bliver overtrænet på ens data, så dens algoritme blot afspejler træningsdata i stedet for den ønskede situation. . | What is a metric? How does it differ from “loss”? . Metric er hvor god modellen er, præsenteret for mennesker Loss er hvor god modellen er, valgt til at styre træningen via SGD | . | How can pretrained models help? . Dermed er der ikke brug for store datasets, da den allerede er trainet. Der bruges fine_tune for at tilpasse det det nye dataset. | Lower training time | Often better result | . | What is the “head” of a model? . Finetuningen vi laver ud fra vores dataset. | Det er den del af modellen der blev tilføjet ved brug af fine_tune med det nye dataset. | . | What kinds of features do the early layers of a CNN find? How about the later layers? . Første lag er linier: vertikale, horizontale, diagonale | Næste lag: Simple former og mønstre | Senere lag kan se mere abstrakte former/mønstre | . | Are image models only useful for photos? . Nej. Alt data der kan præsenteres visuelt, og mennesker kan se forskel på, kan bruges til image models. | . | What is an “architecture”? . Strukturen af modellen | Definerer den matematiske funktion, som vi forsøger at fitte. | . | What is segmentation? . Pixelbaseret klassifikations problem. | Forsøger at forudsige en label for hvert eneste pixel i et billede. | . | What is y_range used for? When do we need it? . Bruges til at begrænse de forudsete værdier, når der bliver forudset en numerisk værdi inden for en given rækkevidde. | . | What are “hyperparameters”? . Parametre der definerer hvordan modellen er trænet. f.eks hvor længe den bli’r trænet | Metadata/metaparametre | . | What’s the best way to avoid failures when using AI in an organization? . Sikre at man har alle tre data set: training, validation og testing set. . | Start med en simpel model, gør komplekst senere. . | . | Complete the Jupyter Notebook online appendix. (use the file app_jupyter.ipynb in Gradient or get it from github: https://oreil.ly/9uPZe) | Why is a GPU useful for deep learning? How is a CPU different, and why is it less effective for deep learning? . Mange små kerner | Gode til parallelisere | . | Try to think of three areas where feedback loops might impact the use of machine learning. See if you can find documented examples of that happening in practice. . Netflix predictions | Amazon predictions | . |",
            "url": "https://double-em.github.io/themlblog/exercise/2021/02/09/week-6.html",
            "relUrl": "/exercise/2021/02/09/week-6.html",
            "date": " • Feb 9, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://double-em.github.io/themlblog/jupyter/setup/2020/02/20/test.html",
            "relUrl": "/jupyter/setup/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://double-em.github.io/themlblog/markdown/setup/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/setup/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://double-em.github.io/themlblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://double-em.github.io/themlblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}